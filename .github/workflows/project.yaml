name: Java CI

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened]
  workflow_dispatch:
    inputs:
      isPreRelease:
        description: 'Is the build pre release?'     
        required: true
        default: true 
        type: boolean
          
jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'corretto'

      - name: Build with Maven
        working-directory: ./Project/SchoolTimetable
        run: mvn --batch-mode --update-snapshots -e -X package
      
      - name: Run the Maven verify phase
        working-directory: ./Project/SchoolTimetable
        run: mvn --batch-mode --update-snapshots -e -X verify
      
      - name: Run the Maven test phase
        working-directory: ./Project/SchoolTimetable
        run: mvn --batch-mode --update-snapshots -e -X test
        
      - name: Publish Test Report
        # uses: mikepenz/action-junit-report@v3
        # uses: scacap/action-surefire-report@v1
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always() # always run even if the previous step fails
        with:
          # name: junit-test-results
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          # path: '**/Project/SchoolTimetable/target/surefire-reports/TEST-*.xml'
          # report_paths: '**/Project/SchoolTimetable/target/surefire-reports/TEST-*.xml'
          files: '**/Project/SchoolTimetable/target/surefire-reports/TEST-*.xml'
          
      - name: Upload Report
        uses: 'actions/upload-artifact@v2'
        with:
          name: report.xml
          path: ${{ github.workspace }}/Project/SchoolTimetable/target/site/jacoco/jacoco.xml

      - name: Jacoco Report to PR
        id: jacocoPR
        uses: madrapps/jacoco-report@v1.3
        with:
          paths: ${{ github.workspace }}/Project/SchoolTimetable/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 30
          min-coverage-changed-files: 60
          debug-mode: true
          title: Code Coverage

      - name: Get the Coverage info
        run: |
          echo "Total coverage ${{ steps.jacoco.outputs.coverage-overall }}"
          echo "Changed Files coverage ${{ steps.jacoco.outputs.coverage-changed-files }}"
          
      - name: Generate JaCoCo Badge
        id: jacocoBadge
        uses: cicirello/jacoco-badge-generator@v2
        with:
          working-directory: ./Project/SchoolTimetable
          generate-branches-badge: true

      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Commit and push the badge (if it changed)
        uses: EndBug/add-and-commit@v7
        with:
          default_author: github_actions
          message: 'commit badge'
          add: '*.svg'

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: ${{ github.workspace }}/Project/SchoolTimetable/target/site/jacoco/
        
      - run: mkdir staging && cp ./Project/SchoolTimetable/target/*.jar staging
      - uses: actions/upload-artifact@v3
        with:
          name: Package
          path: staging
  
  publish:
    name: "Publish to release"
    permissions: write-all
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2

    - name: Add tag data to enviroment
      run: echo "VERSION=0.0.1" >> $GITHUB_ENV

    - uses: actions/download-artifact@v2
      with:
        name: Package
        path: staging

    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "${{env.VERSION}}"
        prerelease: true # ${{ github.event.inputs.isPreRelease }}
        title: Build ${{env.VERSION}}
        files: |
            staging/*
